#!/usr/bin/env python
#
# Copyright Â© 2019 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Keith James <kdj@sanger.ac.uk>

import logging as log

import argparse
import os
import sys
import subprocess
import time


def docker_pull(image):
    subprocess.check_output(['docker', 'pull', image])


DEFAULT_RECIPES_DIR=os.path.expandvars("$HOME/conda-recipes")
DEFAULT_RECIPES_MOUNT="/home/conda/recipes"

DEFAULT_ARTEFACTS_DIR=os.path.expandvars("$HOME/conda-artefacts")
DEFAULT_ARTEFACTS_MOUNT="/opt/conda/conda-bld"

IRODS_BUILD_IMAGE="wsinpg/conda-irods-12.04:0.2"
DEFAULT_BUILD_IMAGE="wsinpg/conda-12.04:0.2"

CONDA_CHANNEL="https://dnap.cog.sanger.ac.uk/npg/conda/devel/"

description = """

Runs conda build in the specified Docker image. This script expects
input on STDIN consisting of 3 whitespace-separated fields per line
for each package to be built:

<package name> <package version> <path to recipe>

This input is normally generated by the accompanying package_sort.py
script which sorts packages so that dependencies are built first.

"""

parser = argparse.ArgumentParser(
    description=description,
    formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument("--recipes-dir",
                    help="Host recipes directory, "
                    "defaults to {}".format(DEFAULT_RECIPES_DIR),
                    type=str, nargs="?", default=DEFAULT_RECIPES_DIR)
parser.add_argument("--recipes-mount",
                    help="Container recipes mount, "
                    "defaults to {}".format(DEFAULT_RECIPES_MOUNT),
                    type=str, nargs="?", default=DEFAULT_RECIPES_MOUNT)

parser.add_argument("--artefacts-dir",
                    help="Host build artefacts directory, "
                    "defaults to {}".format(DEFAULT_ARTEFACTS_DIR),
                    type=str, nargs="?", default=DEFAULT_ARTEFACTS_DIR)
parser.add_argument("--artefacts-mount",
                    help="Container build artefacts mount, "
                    "defaults to {}".format(DEFAULT_ARTEFACTS_MOUNT),
                    type=str, nargs="?", default=DEFAULT_ARTEFACTS_MOUNT)

parser.add_argument("--irods-build-image",
                    help="The Docker image used to build iRODS, "
                    "defaults to {}".format(IRODS_BUILD_IMAGE),
                    type=str, nargs="?", default=IRODS_BUILD_IMAGE)
parser.add_argument("--conda-build-image",
                    help="Docker image used to build packages, "
                    "defaults to {}".format(DEFAULT_BUILD_IMAGE),
                    type=str, nargs="?", default=DEFAULT_BUILD_IMAGE)

parser.add_argument("--dry-run",
                    help="Log the recipes that would be built at INFO level, "
                    "but do not build anything",
                    action="store_true")
parser.add_argument("--debug",
                    help="Enable DEBUG level logging to STDERR",
                    action="store_true")
parser.add_argument("--verbose",
                    help="Enable INFO level logging to STDERR",
                    action="store_true")

args = parser.parse_args()

level = log.ERROR
if args.debug:
    level = log.DEBUG
elif args.verbose or args.dry_run:
    level = log.INFO
log.basicConfig(level=level)

docker_pull(args.conda_build_image)

fail = False

for line in sys.stdin.readlines():
    line.rstrip();
    name, version, path = line.split()
    log.info("Working on %s %s %s", name, version, path)

    build_image = args.conda_build_image
    if name == "irods":
        build_image = args.irods_build_image
        log.info("Using image %s", build_image)
        docker_pull(args.irods_build_image)

    build_script = \
        'export CONDA_BLD_PATH="{}" ; ' \
        'conda config --set auto_update_conda False ; ' \
        'conda config --add channels {} ; ' \
        'cd "{}" && conda build {}'.format(args.artefacts_mount,
                                           CONDA_CHANNEL,
                                           args.recipes_mount,
                                           path)
    if args.dry_run:
        log.info('Build script: "%s"', build_script)
    else:
        log.debug('Build script: "%s"', build_script)

    try:
        subprocess.check_output(
            ['docker', 'run',
             '--mount',
             'source={},target={},type=bind'.format(args.recipes_dir,
                                                    args.recipes_mount),
             '--mount',
             'source={},target={},type=bind'.format(args.artefacts_dir,
                                                    args.artefacts_mount),
             '-i', '-e', 'CONDA_USER_ID=1000',
             build_image,
             '/bin/sh', '-c', build_script], stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        fail = True
        for line in e.output.decode("utf-8").split("\n"):
            log.error(line)

if fail:
    exit(1)
